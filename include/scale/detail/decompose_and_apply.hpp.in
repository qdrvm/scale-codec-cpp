/**
 * Copyright Quadrivium LLC
 * All Rights Reserved
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @brief Provides a function for decomposing structured bindings
 *        and applying a function to each field in SCALE serialization.
 *
 * This file defines a template function that allows decomposing a structured
 * type with a known number of fields and applying a function to its members.
 */

#pragma once

#include <scale/definitions.hpp>

namespace scale::detail {

  /**
   * @brief Decomposes an object into its fields and applies a function to them.
   *
   * @tparam N The number of fields in the object.
   * @tparam T The type of the object.
   * @tparam F The function type to apply.
   * @param v The object to decompose.
   * @param f The function to apply to the decomposed fields.
   * @return The result of applying the function.
   */
  template <size_t N, typename T, typename F>
  decltype(auto) decompose_and_apply(T &&v, const F &f) {
    // clang-format off
    if constexpr (N == 0) {
      return f();
    // -BEGIN-GENERATED-SECTION-
    // -END-GENERATED-SECTION-
    } else {
      // We mustn't fall in here
      static_assert(N <= MAX_FIELD_NUM, "Inconsistent value of MAX_FIELD_NUM");
      static_assert(N > MAX_FIELD_NUM, "No code for cover aggregate with such big amount of fields");
    }
    // clang-format on
  }

}  // namespace scale::detail
